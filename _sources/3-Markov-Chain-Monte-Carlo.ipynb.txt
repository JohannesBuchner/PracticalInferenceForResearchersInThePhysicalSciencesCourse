{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Markov Chain Monte Carlo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Recap\n",
    "\n",
    "We have some target function (the likelihood times the prior) in some parameter space, and we want to integrate it.\n",
    "\n",
    "As a toy example, we chose the following likelihood:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def loglikelihood(*parameters):\n",
    "    a = np.asarray(parameters)[:-1] * 10\n",
    "    b = np.asarray(parameters)[1:] * 10\n",
    "    return -2 * (100 * (b - a**2)**2 + (1 - a)**2).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And we assume our prior is uniform in the domain -1/2 to +1/2 in each parameter. \n",
    "We use two parameters at the moment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "lo = -0.5\n",
    "hi = 0.5\n",
    "dim = 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets plot this function in 2d:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "a = np.linspace(lo, hi, 400)\n",
    "b = np.linspace(lo, hi, 400)\n",
    "\n",
    "grid = np.meshgrid(a, b)\n",
    "grid_unnormalised_logposterior = np.vectorize(loglikelihood)(grid[0], grid[1])\n",
    "\n",
    "plt.imshow(\n",
    "      np.exp(grid_unnormalised_logposterior[::-1]),\n",
    "      extent=(lo, hi, lo, hi),\n",
    "      aspect='equal', cmap='gray_r');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Markov Chain Monte Carlo intro"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In importance sampling, we used uncorrelated points. \n",
    "\n",
    "### Important terminology\n",
    "\n",
    "Now we use an algorithm which produces a sequence of points: $\\theta_1,\\theta_2,...\\theta_N$. We call this a **chain**.\n",
    "\n",
    "A sequence of points where the next point **only** depends on the immediately previous point and not on earlier points is called a **Markov Chain**. We say the chain has a Markov property.\n",
    "\n",
    "![Markov Chain](img/chain.png)\n",
    "\n",
    "If the distribution of chain points approximates the target distribution, we call the chain **converged**. This may require very long chains. Important technical terms are **stationarity** and **ergodicity**: stationary processes do not shift over time. \n",
    "Ergodicity is if the distribution within a long chain is the same as one random point taken from many chains.\n",
    "![Stationary](img/stationary.png)\n",
    "![Ergodicity](img/ergodicity.jpg)\n",
    "\n",
    "\n",
    "Because the algorithm will use random numbers to generate the next point in the Markov Chain (a Monte Carlo algorithm), it is a **Markov Chain Monte Carlo** (MCMC) algorithm.\n",
    "\n",
    "The transition from one point to the next is called a **transition kernel**: $P(\\theta_{i+1}|\\theta_i)$. Each transition kernel gives a subclass of MCMC algorithms.\n",
    "\n",
    "Here we will focus on transition kernels based on a **Gaussian random walk**:\n",
    "\n",
    "$\\theta_{proposed} \\sim Normal(\\theta_i, \\sigma)$:\n",
    "\n",
    "In words, the next point is suggested by a Gaussian draw around the current point.\n",
    "\n",
    "![Gaussian proposal](img/gaussian-proposal.jpg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "mychain = [[0, 0]]\n",
    "proposal_sigma = 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "previous_point = mychain[-1]\n",
    "proposed_point = np.random.normal(previous_point, proposal_sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.00048489, -0.00087557])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "proposed_point"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The final ingredient is the acceptance rule, to decide whether we stay with the current point or accept the proposed point. The rule is very simple and says:\n",
    "\n",
    "*We accept with a probability $\\alpha$, which is the target probability ratio of the current to the proposed point*:\n",
    "\n",
    "$\\alpha = p_\\mathrm{accept} = \\frac{f(\\theta')}{f(\\theta)}$\n",
    "\n",
    "This means there are three scenarios:\n",
    "\n",
    "* The proposed point $\\theta'$ has a much, much lower probability than $\\theta$ -> stay\n",
    "* The proposed point $\\theta'$ has a higher or equal probability than $\\theta$ -> accept\n",
    "* The proposed point $\\theta'$ has a slightly lower probability than $\\theta$ -> there is a chance we will accept.\n",
    "\n",
    "This is called the **Metropolis algorithm**. There is also an extension, the Metropolis-Hasting algorithm, for asymmetric transition kernels.\n",
    "\n",
    "Lets implement our update rule:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-11-de39cf31e82f>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-11-de39cf31e82f>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    prob_new = # call loglikelihood using *theta_new, and convert to linear from ln\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def metropolis_algorithm(theta_new, theta_old):\n",
    "    # TODO by you:\n",
    "    prob_new = # call loglikelihood using *theta_new, and convert to linear from ln\n",
    "    prob_old = # call loglikelihood using *theta_old, and convert to linear from ln\n",
    "    \n",
    "    alpha = # take the ratio between prob_new and prob_old\n",
    "    \n",
    "    # draw randomly proportional to prob_ratio\n",
    "    u = np.random.uniform()\n",
    "    if u < alpha:\n",
    "        return True\n",
    "    else:\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'metropolis_algorithm' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-59a7c029d70b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;31m# do we accept this point?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mmetropolis_algorithm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproposed_point\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprevious_point\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m         \u001b[0mNaccepts\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mnext_point\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproposed_point\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'metropolis_algorithm' is not defined"
     ]
    }
   ],
   "source": [
    "Niter = 10000\n",
    "Naccepts = 0\n",
    "\n",
    "for i in range(Niter):\n",
    "\n",
    "    # get last point added to the chain\n",
    "    previous_point = mychain[-1]\n",
    "\n",
    "    # pick a proposed point\n",
    "    proposed_point = np.random.normal(previous_point, proposal_sigma)\n",
    "\n",
    "    # do we accept this point?\n",
    "    if metropolis_algorithm(proposed_point, previous_point):\n",
    "        Naccepts += 1\n",
    "        next_point = proposed_point\n",
    "    else:\n",
    "        next_point = previous_point\n",
    "\n",
    "    mychain.append(next_point)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets already go ahead and make several chains, so we get a better feel for the typical behaviour:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mcmc(starting_point, Niter, proposal_sigma):\n",
    "    Naccepts = 0\n",
    "    chain = [starting_point]\n",
    "\n",
    "    for i in range(Niter):\n",
    "\n",
    "        previous_point = chain[-1]\n",
    "\n",
    "        proposed_point = np.random.normal(previous_point, proposal_sigma)\n",
    "\n",
    "        # do we accept this point?\n",
    "        if metropolis_algorithm(proposed_point, previous_point):\n",
    "            Naccepts += 1\n",
    "            next_point = proposed_point\n",
    "        else:\n",
    "            next_point = previous_point\n",
    "\n",
    "        chain.append(next_point)\n",
    "\n",
    "    return Naccepts, chain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "chains_results = [mcmc(starting_point=[0, 0], Niter=10000, proposal_sigma=0.001) for i in range(4)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets see how often the proposal was accepted, and a transition was made:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "acceptance rates: 92.4%, 90.6%, 92.1%, 92.3%\n"
     ]
    }
   ],
   "source": [
    "print(\"acceptance rates: \" + ', '.join(['%.1f%%' % (100 * Naccepts / len(chain)) for Naccepts, chain in chains_results]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a rule of thumb for Metropolis MCMC:\n",
    "\n",
    "* 23% is ideal (unless in very low dimensions)\n",
    "* \\>50% indicates the proposal is too small and the algorithm performs a random walk.\n",
    "* 0% indicates the chain is stuck: The proposal is too wide and does not find good nearby points.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "chains = np.asarray([chain for Naccepts, chain in chains_results])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualisations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2d: conditional probability distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(\n",
    "            np.asarray(chains[0])[:,0],\n",
    "            np.asarray(chains[0])[:,1],\n",
    "            c=np.arange(len(chains[0])),\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Trace plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each parameter, plot iteration vs value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(dim):\n",
    "    plt.figure()\n",
    "\n",
    "    # TODO by you: plot all four chains instead of mychain\n",
    "    plt.plot(np.asarray(mychain)[:,i])\n",
    "    \n",
    "    plt.ylabel(\"Parameter %d\" % (i+1))\n",
    "    plt.xlabel(\"Iteration\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Marginal probability distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'chains' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-f5067bee8c25>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;31m# TODO by you: plot all four chains instead of mychain\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mchain\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mchains\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhisttype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'step'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'chains' is not defined"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(dim):\n",
    "    plt.figure()\n",
    "\n",
    "    # TODO by you: plot all four chains instead of mychain\n",
    "    for chain in chains:\n",
    "        plt.hist(chain[:,i], bins=100, histtype='step')\n",
    "\n",
    "    plt.xlabel(\"Parameter %d\" % (i+1))\n",
    "    plt.ylabel(\"Number of samples\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The trace plots show clearly that there is correlation between points.\n",
    "\n",
    "Points are not independent, but **correlated**.\n",
    "\n",
    "We can see this by splitting the chain into chunks:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in [0]:\n",
    "    plt.figure()\n",
    "    chain = chains[0]\n",
    "    chain_chunks = np.array_split(chain, 4)\n",
    "    for chunk in chain_chunks:\n",
    "        plt.hist(chunk[:,i], bins=20, histtype='step')\n",
    "    plt.xlabel(\"Parameter %d\" % (i+1))\n",
    "    plt.ylabel(\"Number of samples\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the histograms are quite different between chunks, the chain has not converged. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "j = 0\n",
    "\n",
    "for i in [0]:\n",
    "    plt.figure()\n",
    "    for chain in chains:\n",
    "        chain_chunks = np.array_split(chain, 4)\n",
    "        for chunk in chain_chunks:\n",
    "            plt.errorbar(x=chunk.mean(), xerr=chunk.std(), y=j + 1, marker='x', color='k')\n",
    "            j += 1\n",
    "        plt.errorbar(x=chain[:,i].mean(), xerr=chain[:,i].std(), y=j + 1, marker='o', color='r')\n",
    "        j += 2\n",
    "    \n",
    "    plt.xlabel(\"Parameter %d\" % (i+1))\n",
    "    plt.ylabel(\"Number of samples\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ideally, we want all of the markers (x and o) to line up."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can quantify this by comparing the variance of the means within the chunks and across chains:\n",
    "\n",
    "* Let $W$ be the average of the within-chain variances.\n",
    "* Let $M_i$ be the mean in chain i, and $M$ the overall mean\n",
    "* Let $B$ be the variance of M_ij: $B=\\frac{1}{m-1}\\sum_{i=1}^m (M_i - M)^2$\n",
    "* Let $\\hat{R} \\approx \\sqrt{1 + B/W}$\n",
    "\n",
    "If the variances across chains are much smaller ($B\\approx0$) than the variances within each chain (W), then $\\hat{R}=1$. In other words, the means for each chain are comparable.\n",
    "\n",
    "Deviations from 1 (e.g., \\>1.01) are a sign that the chain has not converged.\n",
    "\n",
    "![Variance within a chain](img/variance-within-chain.png)\n",
    "\n",
    "![Variance between chains](img/variance-between-chains.png)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B: 0.0006125435020075697 W: 0.0007333165098014844\n",
      "Rhat for Parameter 0: 1.35\n",
      "\n",
      "B: 0.0003182154013342918 W: 0.0003374937287057879\n",
      "Rhat for Parameter 1: 1.39\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i in range(dim):\n",
    "    mean = np.mean(chains[:,:,i])\n",
    "\n",
    "    chunk_variances = []\n",
    "    \n",
    "    chain_variances = []\n",
    "    for chain in chains:\n",
    "        chain_variances.append(np.var(chain[:,i]))\n",
    "        chain_chunks = np.array_split(chain, 4)\n",
    "        for chunk in chain_chunks:\n",
    "            chunk_variances.append( ((chunk[:,i].mean() - mean)**2))\n",
    "    \n",
    "    W = np.mean(chain_variances)\n",
    "    B = sum(chunk_variances) / (len(chunk_variances) - 1)\n",
    "    \n",
    "    print(\"B:\", B, \"W:\", W)\n",
    "    print(\"Rhat for Parameter %d: %.2f\" % (i, np.sqrt(1+B/W)))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1 (30 points)\n",
    "\n",
    "* Play with the number of MCMC iterations and the proposal standard deviation.\n",
    "\n",
    "* Observe the trace plots. What do you notice? Can you make Rhat=1?\n",
    "\n",
    "* Plot the Niter needed so that Rhat becomes <1.01, for different values of sigma (0.1, 0.04, 0.01, for example).\n",
    "\n",
    "* Plot acceptance rate vs sigma.\n",
    "\n",
    "* Plot Niter vs sigma.\n",
    "\n",
    "## Exercise 2 (10 points)\n",
    "\n",
    "Try starting the chain at a random location in prior space.\n",
    "\n",
    "The algorithm we used works in probabilities, but has numerical problems when they become smaller than 1e-330.\n",
    "\n",
    "--> Rewrite the MCMC algorithm to work with logarithmic probabilities only (never using exp).\n",
    "\n",
    "## Homework exercise 1 (20 points)\n",
    "\n",
    "Find the [auto-correlation length](https://emcee.readthedocs.io/en/stable/tutorials/autocorr/) of one of the chains.\n",
    "\n",
    "Measure the effective sample size by dividing the number of samples by the auto-correlation length.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Related to efficiency:\n",
    "* What have you learned about the proposal distribution and auto-correlation?\n",
    "* Will a small proposal size give higher or lower correlation between points?\n",
    "* What proposal shape and size would be most efficient?\n",
    "\n",
    "Related to using the output of MCMC algorithms:\n",
    "* How would you use the marginal histograms to get parameter uncertainties?\n",
    "* If the chain is not converged, what would a user of a single chain conclude about the credible interval? What could go wrong?\n",
    "* How did we compute the Bayesian evidence (normalising factor)?\n",
    "* Is convergence defined for the chain globally, or for each parameter?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Homework exercise 2 (60 points)\n",
    "\n",
    "Set up a target density which sums two Gaussians:\n",
    "\n",
    "$f(\\theta)=\\mathrm{NormalPDF}(\\theta|\\mu=-\\Delta,\\sigma=1) + \\mathrm{NormalPDF}(\\theta|\\mu=+\\Delta,\\sigma=1).$\n",
    "\n",
    "Plot $\\Delta$ vs the number of iterations needed for convergence, for 2d and 20d.\n",
    "\n",
    "Starting the chains at random locations.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further reading\n",
    "\n",
    "MCMC is a very mature field and its algorithmic variants have been studied for >50 years.\n",
    "\n",
    "There are lots of resources (slides, papers, tutorials) online, just search for \"intro/tutorial to MCMC\".\n",
    "\n",
    "Gaussian Random Walk Metropolis MCMC is quite inefficient in moderate dimensions (>5), even with optimally adapted proposals.\n",
    "\n",
    "Important MCMC variants:\n",
    "\n",
    "* Gibbs sampling: analytic conditional distributions allow 100% efficient updates of one parameter.\n",
    "* Slice sampling\n",
    "* Simulated tempering, Parallel tempering: make chain easier to navigate by suppressing the likelihod $L^{\\beta}, \\beta=0...1$.\n",
    "* Ensemble updates: Maintain several walkers (chains) and update them all\n",
    "  * Differential Evolution MCMC\n",
    "  * Goodman Weare, aka, Affine-Invariant Ensemble sampler\n",
    "     * [emcee](https://emcee.readthedocs.io/) implementation extremely popular in astronomy\n",
    "     * Sensitive to initialisation, two tuning parameters: number of walkers and gamma.\n",
    "     * Beware of bad behaviour in high-d: https://arxiv.org/abs/1509.02230\n",
    "  * Ensemble Slice Sampling (zeus)\n",
    "     * [zeus](https://zeus-mcmc.readthedocs.io/) implementation, similar use as emcee\n",
    "* Reversible Jump MCMC: allows varying dimensionality. Difficult to work with.\n",
    "* Hamiltonian Monte Carlo: Uses likelihood gradients to make trajectories. Efficient in high dimensions.\n",
    "\n",
    "Diagnostics:\n",
    "\n",
    "* https://arviz-devs.github.io/arviz/\n",
    "* CODA R package\n",
    "* state-of-the-art R-hat paper: https://arxiv.org/abs/1903.08008\n",
    "\n",
    "Conceptual introduction: https://arxiv.org/pdf/1701.02434.pdf\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ticket to leave\n",
    "\n",
    "Fill out the [form below](https://indico.ph.tum.de/event/6875/surveys/8) and then you can leave the class. (+5 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<iframe src=\"https://indico.ph.tum.de/event/6875/surveys/8\" style=\"width: 100%; height: 400px\"></iframe>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "\n",
    "<iframe src=\"https://indico.ph.tum.de/event/6875/surveys/8\" style=\"width: 100%; height: 400px\"></iframe>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
